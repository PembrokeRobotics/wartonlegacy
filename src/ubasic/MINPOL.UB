   10   ' fnMinPol(x,n) computes minimal polynomial of degree n for x.
   20   ' This version uses extended memory.
   30   ' See end of listing for a program description.
   40   '
   50   input "How many decimals after point";P%:P%=1+int(P%/4.8)
   60   word -min(542,4*P%):point -P%:emaword -min(542,4*P%)
   70   Noisy=1
   80   if Noisy print:print "fnMinPol(x,n) computes a minimal polynomial ";
   90   :print "of degree n for x."
  100   :print "It also computes a logarithmic reliability index. Reliability"
  110   :print "of 1 is often OK, around 4 is already very convincing."
  120   :print "To find a polynomial of degree n with coefficients bounded by"
  130   :print "10^c you will need at least n*c digits of accuracy for x."
  140   :print:print "Here is an example:":print
  150   :Inpt#=" x=sqrt(5)+1-sqrt(2)-sqrt(3) : print fnMinPol(x,8) "
  160   :print Inpt#:print:eval(Inpt#)
  170   end
  180   fnMinPol(X,N%)
  190   dim ema(0;N%,N%),ema(1;N%,N%),V(N%),R(N%) 'used by main algorithm
  200   local PP=0.9,Rr=1
  210   local RQ=10^(9*P%),J,K,L,A#=0,Af=0,A1=0,Af1=0,V,M,R
  220   R(0)=1:for I=0 to N%-1:R(I+1)=R(I)*X:next
  230   '
  240   clr block ema(1;0..N%,0..N%)
  250   V(0)=re(R(0))^2+im(R(0))^2:V(1)=im(R(0)*conj(R(1)))
  260   for J=1 to N%:ema(1;J,0)=re(R(0)*conj(R(J)))/V(0):next
  270   if V(1)=0 then V(1)=1:Rr=0:jump ' Real x
  280   for J=2 to N%:ema(1;J,1)=im(R(0)*conj(R(J)))/V(1):next
  290   V(1)=V(1)^2/V(0)*RQ
  300   **:V(0)=V(0)*RQ
  310   for J=2 to N%:V(J)=1:next
  320   '
  330   clr block ema(0;0..N%,0..N%):for J=0 to N%:ema(0;J,J)=1:next
  340   '
  350   K=1:goto *R1
  360   *R2:M=ema(1;K,K-1):V=V(K)+M*M*V(K-1):ema(1;K,K-1)=M*V(K-1)/V
  370   V(K)=V(K-1)*V(K)/V:V(K-1)=V
  380   swap block ema(0;K,0..N%),block ema(0;K-1,0..N%)
  390   if K>1 then swap block ema(1;K,0..K-2),block ema(1;K-1,0..K-2)
  400   for J=K+1 to N%
  410   V=ema(1;J,K):ema(1;J,K)=ema(1;J,K-1)-M*V:ema(1;J,K-1)=V+ema(1;K,K-1)*ema(1;J,K):next
  420   if K>1 then dec K
  430   *R1:L=K-1:gosub *R3
  440   if V(K)/V(K-1)+ema(1;K,K-1)*ema(1;K,K-1)<PP goto *R2
  450   for L=K-2 to 0 step -1:gosub *R3:next L
  460   inc K:if K<=N% goto *R1
  470   goto *DONE
  480   *R3:if abs(ema(1;K,L))<=0.5 then return
  490   R=int(0.5+ema(1;K,L))
  500   for J=0 to N%:ema(0;K,J)=ema(0;K,J)-R*ema(0;L,J):next J
  510   ema(1;K,L)=ema(1;K,L)-R:for J=0 to L-1:ema(1;K,J)=ema(1;K,J)-R*ema(1;L,J):next
  520   return
  530   '
  540   *DONE
  550   for J=0 to N%:
  560   A#=A#+ema(0;0,J)*_X^J:Af=Af+ema(0;0,J)*ema(0;0,J)
  570   A1=A1+ema(0;1,J)*R(J):Af1=Af1+ema(0;1,J)*ema(0;1,J):next
  580   Af=Af+RQ*abs(val(A#,X))^2-ema(0;0,0)^2-Rr*ema(0;0,1)^2
  590   Af1=Af1+RQ*abs(A1)^2-ema(0;1,0)^2-Rr*ema(0;1,1)^2
  600   if Noisy print "  Reliability index: ";using(3,3),log(Af1/Af)/log(10)
  610   return(A#)
  620   ' This program uses the reduction algorithm of Lengstra, Lengstra,
  630   ' Lovasz (Math. Ann. 261 (1982) 515-534) to obtain a "reduced basis"
  640   ' for the following bilinear form over Z,  (N is a large parameter):
  650   '
  660   '   q(a0, ... ,an) = a2^2+a3^2+...+an^2+N*abs(a0+...+an*z^n)^2
  670   '
  680   ' Since a short vector for the form makes a0+...+an*z^n very small,
  690   ' this tests if the number z is algebraic.
  700   '
  710   ' If z is real the program uses the following form Q instead of q
  720   '
  730   '   Q(a0, ... ,an) = a1^2+...+an^2+N*(a0+...+an*z^n)^2
  740   '
  750   ' The program uses a parameter RQ.   N is 10^RQ.
  760   ' We use about 1.875*(number of digits carried).
  770   '
  780   ' Suggested values (assuming abs(z) not too far from 1):  To find
  790   ' ai bounded by 10^c you will need a bit more than n*c digits of
  800   ' accuracy for z.  Try RQ around n*c (2*n*c in the real case),
  810   ' but below 2*(number of digits carried) to limit roundoff error.
  820   '
  830   ' Running time is roughly proportional to RQ*(n-1)^2 for given POINT.
  840   ' Thus, with POINT and RQ optimized for for given c and n,
  850   ' it is very roughly proportional to c^3*n^5.
  860   '                                              W.D. Neumann
  870   '
